{
    "version": "https://jsonfeed.org/version/1",
    "title": "Blog",
    "description": "",
    "home_page_url": "https://lauhnguyen.github.io/Blog",
    "feed_url": "https://lauhnguyen.github.io/Blog/feed.json",
    "user_comment": "",
    "author": {
        "name": "hoangnguyen"
    },
    "items": [
        {
            "id": "https://lauhnguyen.github.io/Blog/javascript-ngon-ngu-lap-trinh-cua-web-hien-dai.html",
            "url": "https://lauhnguyen.github.io/Blog/javascript-ngon-ngu-lap-trinh-cua-web-hien-dai.html",
            "title": "JavaScript: Ngôn ngữ lập trình của web hiện đại",
            "summary": "1. Giới thiệu về JavaScript JavaScript là ngôn ngữ lập trình phổ biến nhất trong phát triển web. Ban đầu&hellip;",
            "content_html": "<main>\n<article class=\"post-content\">\n<h2> </h2>\n<h3>1. Giới thiệu về JavaScript</h3>\n<p>JavaScript là ngôn ngữ lập trình phổ biến nhất trong phát triển web. Ban đầu được tạo ra để làm cho các trang web trở nên tương tác hơn, ngày nay JavaScript đã phát triển thành một ngôn ngữ đa năng có thể được sử dụng ở cả client-side và server-side.</p>\n<h3>2. Các tính năng cơ bản của JavaScript hiện đại</h3>\n<pre><code>\n// Variables và Constants\nlet name = \"JavaScript\";\nconst version = \"ES6+\";\n\n// Arrow Functions\nconst sum = (a, b) =&gt; a + b;\n\n// Template Literals\nconst greeting = `Hello ${name}!`;\n\n// Destructuring\nconst {firstName, lastName} = person;\nconst [first, ...rest] = array;\n            </code></pre>\n<h3>3. DOM Manipulation</h3>\n<p>JavaScript cho phép thao tác với DOM (Document Object Model) một cách dễ dàng:</p>\n<pre><code>\n// Selecting elements\nconst element = document.querySelector('.my-class');\n\n// Event handling\nelement.addEventListener('click', () =&gt; {\n    console.log('Element clicked!');\n});\n\n// Modifying content\nelement.innerHTML = 'New content';\n            </code></pre>\n<h3>4. Asynchronous Programming</h3>\n<p>JavaScript hỗ trợ lập trình bất đồng bộ thông qua:</p>\n<ul>\n<li>Promises</li>\n<li>Async/Await</li>\n<li>Callbacks</li>\n</ul>\n<pre><code>\n// Using async/await\nasync function fetchData() {\n    try {\n        const response = await fetch('api/data');\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error:', error);\n    }\n}\n            </code></pre>\n<h3>5. Modern JavaScript Frameworks</h3>\n<p>Các framework JavaScript phổ biến:</p>\n<ul>\n<li>React</li>\n<li>Vue.js</li>\n<li>Angular</li>\n<li>Svelte</li>\n</ul>\n<h3>6. JavaScript trong phát triển Full-stack</h3>\n<p>Với Node.js, JavaScript có thể được sử dụng để phát triển:</p>\n<ul>\n<li>RESTful APIs</li>\n<li>Real-time applications</li>\n<li>Microservices</li>\n<li>Command-line tools</li>\n</ul>\n<h3>Kết luận</h3>\n<p>JavaScript đã phát triển từ một ngôn ngữ script đơn giản thành một công cụ mạnh mẽ cho phát triển web hiện đại. Với sự phát triển liên tục của các framework và công cụ mới, JavaScript tiếp tục là một kỹ năng quan trọng cho các nhà phát triển web.</p>\n</article>\n</main>",
            "image": "https://lauhnguyen.github.io/Blog/media/posts/12/feature.jpg",
            "author": {
                "name": "hoangnguyen"
            },
            "tags": [
                   "Bài Viết"
            ],
            "date_published": "2024-12-26T23:15:05+07:00",
            "date_modified": "2024-12-29T10:03:05+07:00"
        },
        {
            "id": "https://lauhnguyen.github.io/Blog/so-sanh-java-va-javascript-diem-giong-va-khac-nhau.html",
            "url": "https://lauhnguyen.github.io/Blog/so-sanh-java-va-javascript-diem-giong-va-khac-nhau.html",
            "title": "So sánh Java và JavaScript: Điểm giống và khác nhau",
            "summary": "So sánh Java và JavaScript: Điểm giống và khác nhau 1. Nguồn gốc và Mục đích Đặc điểm Java JavaScript&hellip;",
            "content_html": "<main>\n<article class=\"post-content\">\n<h2>So sánh Java và JavaScript: Điểm giống và khác nhau</h2>\n<h3>1. Nguồn gốc và Mục đích</h3>\n<table style=\"width: 100%; margin: 20px 0;\" border=\"1\">\n<tbody>\n<tr>\n<th>Đặc điểm</th>\n<th>Java</th>\n<th>JavaScript</th>\n</tr>\n<tr>\n<td>Năm ra đời</td>\n<td>1995</td>\n<td>1995</td>\n</tr>\n<tr>\n<td>Người tạo</td>\n<td>James Gosling (Sun Microsystems)</td>\n<td>Brendan Eich (Netscape)</td>\n</tr>\n<tr>\n<td>Mục đích chính</td>\n<td>Phát triển ứng dụng đa nền tảng</td>\n<td>Tạo tương tác cho trang web</td>\n</tr>\n</tbody>\n</table>\n<h3>2. Điểm giống nhau</h3>\n<ul>\n<li>Cú pháp dựa trên C/C++</li>\n<li>Hỗ trợ lập trình hướng đối tượng</li>\n<li>Có thư viện chuẩn phong phú</li>\n<li>Cộng đồng lớn và nhiều tài liệu</li>\n</ul>\n<h3>3. Điểm khác nhau chính</h3>\n<h4>Kiểu dữ liệu và Biến</h4>\n<pre><code>\n// Java - Strongly typed\nint number = 42;\nString text = \"Hello\";\n\n// JavaScript - Dynamically typed\nlet number = 42;\nnumber = \"Hello\"; // Perfectly valid\n            </code></pre>\n<h4>Thực thi code</h4>\n<p>Java:</p>\n<ul>\n<li>Biên dịch thành bytecode</li>\n<li>Chạy trên JVM</li>\n<li>Cần biên dịch trước khi chạy</li>\n</ul>\n<p>JavaScript:</p>\n<ul>\n<li>Thông dịch trực tiếp</li>\n<li>Chạy trong trình duyệt hoặc Node.js</li>\n<li>Không cần biên dịch trước</li>\n</ul>\n<h3>4. Ứng dụng phổ biến</h3>\n<h4>Java:</h4>\n<ul>\n<li>Ứng dụng Enterprise</li>\n<li>Ứng dụng Android</li>\n<li>Hệ thống phân tán</li>\n<li>Ứng dụng desktop</li>\n</ul>\n<h4>JavaScript:</h4>\n<ul>\n<li>Phát triển web frontend</li>\n<li>Ứng dụng Node.js backend</li>\n<li>Progressive Web Apps</li>\n<li>Browser extensions</li>\n</ul>\n<h3>Kết luận</h3>\n<p>Mặc dù có tên gọi tương tự, Java và JavaScript là hai ngôn ngữ hoàn toàn khác nhau với những ưu điểm và use case riêng. Việc hiểu rõ điểm mạnh của mỗi ngôn ngữ sẽ giúp lập trình viên chọn công cụ phù hợp cho dự án của mình.</p>\n</article>\n</main>",
            "image": "https://lauhnguyen.github.io/Blog/media/posts/11/feature.jpg",
            "author": {
                "name": "hoangnguyen"
            },
            "tags": [
                   "Bài Viết"
            ],
            "date_published": "2024-12-26T23:15:00+07:00",
            "date_modified": "2024-12-29T10:03:18+07:00"
        },
        {
            "id": "https://lauhnguyen.github.io/Blog/huong-dan-su-dung-spring-boot-trong-java.html",
            "url": "https://lauhnguyen.github.io/Blog/huong-dan-su-dung-spring-boot-trong-java.html",
            "title": "Hướng dẫn sử dụng Spring Boot trong Java",
            "summary": "1. Giới thiệu về Spring Boot Spring Boot là một framework mạnh mẽ giúp đơn giản hóa việc phát triển&hellip;",
            "content_html": "<main>\n<article class=\"post-content\">\n<h2> </h2>\n<h3>1. Giới thiệu về Spring Boot</h3>\n<p>Spring Boot là một framework mạnh mẽ giúp đơn giản hóa việc phát triển ứng dụng Spring. Nó cung cấp cấu hình mặc định cho các ứng dụng Spring, giúp giảm thời gian và công sức phát triển.</p>\n<h3>2. Tạo một dự án Spring Boot</h3>\n<p>Để bắt đầu, bạn có thể sử dụng Spring Initializr (https://start.spring.io/) hoặc IDE yêu thích của bạn để tạo một dự án Spring Boot mới.</p>\n<h3>3. Cấu trúc dự án cơ bản</h3>\n<pre><code>\nsrc\n├── main\n│   ├── java\n│   │   └── com\n│   │       └── example\n│   │           └── demo\n│   │               ├── DemoApplication.java\n│   │               ├── controller\n│   │               ├── model\n│   │               ├── repository\n│   │               └── service\n│   └── resources\n│       ├── application.properties\n│       ├── static\n│       └── templates\n└── test\n            </code></pre>\n<h3>4. Tạo một REST API đơn giản</h3>\n<p>Dưới đây là ví dụ về một controller đơn giản:</p>\n<pre><code>\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class HelloController {\n\n    @GetMapping(\"/hello\")\n    public String hello() {\n        return \"Hello, Spring Boot!\";\n    }\n}\n            </code></pre>\n<h3>5. Dependency Injection</h3>\n<p>Spring Boot sử dụng Dependency Injection để quản lý các bean:</p>\n<pre><code>\n@Service\npublic class UserService {\n    private final UserRepository userRepository;\n\n    public UserService(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }\n\n    // Service methods\n}\n\n@RestController\npublic class UserController {\n    private final UserService userService;\n\n    public UserController(UserService userService) {\n        this.userService = userService;\n    }\n\n    // Controller methods\n}\n            </code></pre>\n<h3>6. Cấu hình ứng dụng</h3>\n<p>Sử dụng file application.properties hoặc application.yml để cấu hình ứng dụng:</p>\n<pre><code>\n# application.properties\nserver.port=8080\nspring.datasource.url=jdbc:mysql://localhost:3306/mydb\nspring.datasource.username=root\nspring.datasource.password=password\n            </code></pre>\n<h3>7. Spring Data JPA</h3>\n<p>Spring Boot hỗ trợ tốt cho việc làm việc với cơ sở dữ liệu thông qua Spring Data JPA:</p>\n<pre><code>\n@Entity\npublic class User {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    private String name;\n    private String email;\n\n    // Getters and setters\n}\n\n@Repository\npublic interface UserRepository extends JpaRepository&lt;User, Long&gt; {\n    List findByName(String name);\n}\n            </code></pre>\n<h3>8. Testing trong Spring Boot</h3>\n<p>Spring Boot cung cấp nhiều tiện ích để viết unit test và integration test:</p>\n<pre><code>\n@SpringBootTest\nclass UserServiceTest {\n\n    @Autowired\n    private UserService userService;\n\n    @Test\n    void testCreateUser() {\n        User user = new User(\"John Doe\", \"john@example.com\");\n        User savedUser = userService.createUser(user);\n        assertNotNull(savedUser.getId());\n        assertEquals(\"John Doe\", savedUser.getName());\n    }\n}\n            </code></pre>\n<h3>Kết luận</h3>\n<p>Spring Boot là một công cụ mạnh mẽ giúp đơn giản hóa quá trình phát triển ứng dụng Java. Với cấu hình tự động và tích hợp sẵn nhiều module, Spring Boot cho phép các nhà phát triển tập trung vào logic kinh doanh thay vì lo lắng về cấu hình.</p>\n</article>\n</main><footer>\n<p> </p>\n</footer>",
            "image": "https://lauhnguyen.github.io/Blog/media/posts/10/feature.jpg",
            "author": {
                "name": "hoangnguyen"
            },
            "tags": [
                   "Bài Viết"
            ],
            "date_published": "2024-12-26T23:15:00+07:00",
            "date_modified": "2024-12-29T10:03:27+07:00"
        },
        {
            "id": "https://lauhnguyen.github.io/Blog/reactjs-xay-dung-giao-dien-nguoi-dung-voi-javascript.html",
            "url": "https://lauhnguyen.github.io/Blog/reactjs-xay-dung-giao-dien-nguoi-dung-voi-javascript.html",
            "title": "React.js: Xây dựng giao diện người dùng với JavaScript",
            "summary": "1. Giới thiệu về React React là một thư viện JavaScript mã nguồn mở được phát triển bởi Facebook để&hellip;",
            "content_html": "<main>\n<article class=\"post-content\">\n<h2> </h2>\n<h3>1. Giới thiệu về React</h3>\n<p>React là một thư viện JavaScript mã nguồn mở được phát triển bởi Facebook để xây dựng giao diện người dùng. Nó cho phép tạo ra các ứng dụng web động và hiệu quả với ít code hơn.</p>\n<h3>2. Cài đặt và Tạo Dự án React</h3>\n<p>Sử dụng Create React App để bắt đầu nhanh chóng:</p>\n<pre><code>\nnpx create-react-app my-react-app\ncd my-react-app\nnpm start\n            </code></pre>\n<h3>3. Components trong React</h3>\n<p>React sử dụng khái niệm component để tổ chức UI:</p>\n<pre><code>\nimport React from 'react';\n\nfunction Welcome(props) {\n  return</code></pre>\n<h1>Hello, {props.name}</h1>\n<pre><code>;\n}\n\nfunction App() {\n  return (</code></pre>\n<div> </div>\n<pre><code>\n  );\n}\n\nexport default App;\n            </code></pre>\n<h3>4. State và Props</h3>\n<p>State là dữ liệu private của component, trong khi props là dữ liệu được truyền từ component cha:</p>\n<pre><code>\nimport React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (</code></pre>\n<div>\n<p>You clicked {count} times</p>\n<button> setCount(count + 1)}&gt; Click me </button></div>\n<pre><code>\n  );\n}\n            </code></pre>\n<h3>5. Lifecycle Methods (với Class Components)</h3>\n<p>Class components có các phương thức lifecycle như componentDidMount, componentDidUpdate, và componentWillUnmount:</p>\n<pre><code>\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () =&gt; this.tick(),\n      1000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n\n  render() {\n    return (</code></pre>\n<div>\n<h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n</div>\n<pre><code>\n    );\n  }\n}\n            </code></pre>\n<h3>6. Hooks (với Function Components)</h3>\n<p>Hooks cho phép sử dụng state và các tính năng React khác mà không cần viết class:</p>\n<pre><code>\nimport React, { useState, useEffect } from 'react';\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() =&gt; {\n    document.title = `You clicked ${count} times`;\n  });\n\n  return (</code></pre>\n<div>\n<p>You clicked {count} times</p>\n<button> setCount(count + 1)}&gt; Click me </button></div>\n<pre><code>\n  );\n}\n            </code></pre>\n<h3>7. Handling Events</h3>\n<p>React có cú pháp riêng để xử lý sự kiện:</p>\n<pre><code>\nfunction ActionLink() {\n  function handleClick(e) {\n    e.preventDefault();\n    console.log('The link was clicked.');\n  }\n\n  return (\n    <a href=\"#\" onclick=\"{handleClick}\">\n      Click me\n    </a>\n  );\n}\n            </code></pre>\n<h3>8. Conditional Rendering</h3>\n<p>React cho phép render có điều kiện dựa trên state của ứng dụng:</p>\n<pre><code>\nfunction Greeting(props) {\n  const isLoggedIn = props.isLoggedIn;\n  if (isLoggedIn) {\n    return ;\n  }\n  return ;\n}\n            </code></pre>\n<h3>Kết luận</h3>\n<p>React.js là một công cụ mạnh mẽ để xây dựng giao diện người dùng hiện đại và tương tác. Với khái niệm component, virtual DOM, và hệ sinh thái phong phú, React đã trở thành một trong những lựa chọn hàng đầu cho phát triển frontend.</p>\n</article>\n</main>",
            "image": "https://lauhnguyen.github.io/Blog/media/posts/9/feature.jpg",
            "author": {
                "name": "hoangnguyen"
            },
            "tags": [
                   "Bài Viết"
            ],
            "date_published": "2024-12-26T23:15:00+07:00",
            "date_modified": "2024-12-29T10:03:38+07:00"
        },
        {
            "id": "https://lauhnguyen.github.io/Blog/lap-trinh-da-luong-trong-java.html",
            "url": "https://lauhnguyen.github.io/Blog/lap-trinh-da-luong-trong-java.html",
            "title": "Lập trình đa luồng trong Java",
            "summary": "1. Giới thiệu về đa luồng Đa luồng là khả năng một chương trình thực hiện nhiều tác vụ cùng&hellip;",
            "content_html": "<article class=\"post-content\">\n<h2> </h2>\n<h3>1. Giới thiệu về đa luồng</h3>\n<p>Đa luồng là khả năng một chương trình thực hiện nhiều tác vụ cùng một lúc. Trong Java, đa luồng cho phép tối ưu hóa hiệu suất và tận dụng tốt hơn tài nguyên hệ thống.</p>\n<h3>2. Tạo và chạy một Thread</h3>\n<p>Có hai cách chính để tạo thread trong Java:</p>\n<h4>a. Kế thừa từ lớp Thread</h4>\n<pre><code>\npublic class MyThread extends Thread {\n    public void run() {\n        System.out.println(\"Thread đang chạy\");\n    }\n}\n\n// Sử dụng\nMyThread thread = new MyThread();\nthread.start();\n            </code></pre>\n<h4>b. Implement interface Runnable</h4>\n<pre><code>\npublic class MyRunnable implements Runnable {\n    public void run() {\n        System.out.println(\"Thread đang chạy\");\n    }\n}\n\n// Sử dụng\nThread thread = new Thread(new MyRunnable());\nthread.start();\n            </code></pre>\n<h3>3. Synchronization</h3>\n<p>Synchronization giúp đảm bảo rằng chỉ một thread có thể truy cập vào một phần code tại một thời điểm:</p>\n<pre><code>\npublic synchronized void synchronizedMethod() {\n    // Code được đồng bộ hóa\n}\n\n// Hoặc\npublic void method() {\n    synchronized(this) {\n        // Khối code được đồng bộ hóa\n    }\n}\n            </code></pre>\n<h3>4. Thread States</h3>\n<p>Một thread trong Java có thể ở một trong các trạng thái sau:</p>\n<ul>\n<li>New</li>\n<li>Runnable</li>\n<li>Blocked</li>\n<li>Waiting</li>\n<li>Timed Waiting</li>\n<li>Terminated</li>\n</ul>\n<h3>5. Thread Pool</h3>\n<p>Thread Pool là một kỹ thuật quản lý thread hiệu quả:</p>\n<pre><code>\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\nExecutorService executor = Executors.newFixedThreadPool(5);\nfor (int i = 0; i &lt; 10; i++) {\n    Runnable worker = new WorkerThread(\"\" + i);\n    executor.execute(worker);\n}\nexecutor.shutdown();\n            </code></pre>\n<h3>6. Deadlock</h3>\n<p>Deadlock xảy ra khi hai hoặc nhiều thread chờ đợi lẫn nhau vô hạn. Ví dụ:</p>\n<pre><code>\npublic class DeadlockExample {\n    public static void main(String[] args) {\n        final String resource1 = \"resource1\";\n        final String resource2 = \"resource2\";\n        \n        Thread t1 = new Thread(() -&gt; {\n            synchronized (resource1) {\n                System.out.println(\"Thread 1: locked resource 1\");\n                try { Thread.sleep(100);} catch (Exception e) {}\n                synchronized (resource2) {\n                    System.out.println(\"Thread 1: locked resource 2\");\n                }\n            }\n        });\n        \n        Thread t2 = new Thread(() -&gt; {\n            synchronized (resource2) {\n                System.out.println(\"Thread 2: locked resource 2\");\n                try { Thread.sleep(100);} catch (Exception e) {}\n                synchronized (resource1) {\n                    System.out.println(\"Thread 2: locked resource 1\");\n                }\n            }\n        });\n        \n        t1.start();\n        t2.start();\n    }\n}\n            </code></pre>\n<h3>7. Concurrent Collections</h3>\n<p>Java cung cấp các collection thread-safe như ConcurrentHashMap, CopyOnWriteArrayList:</p>\n<pre><code>\nimport java.util.concurrent.ConcurrentHashMap;\n\nConcurrentHashMap&lt;String, Integer&gt; map = new ConcurrentHashMap&lt;&gt;();\nmap.put(\"key\", 1);\nInteger value = map.get(\"key\");\n            </code></pre>\n<h3>Kết luận</h3>\n<p>Lập trình đa luồng trong Java là một kỹ năng quan trọng giúp tối ưu hóa hiệu suất ứng dụng. Tuy nhiên, nó cũng đi kèm với những thách thức như deadlock và race condition. Việc hiểu và áp dụng đúng các kỹ thuật đa luồng sẽ giúp bạn phát triển các ứng dụng Java mạnh mẽ và hiệu quả hơn.</p>\n</article>",
            "image": "https://lauhnguyen.github.io/Blog/media/posts/8/feature.jpg",
            "author": {
                "name": "hoangnguyen"
            },
            "tags": [
                   "Bài Viết"
            ],
            "date_published": "2024-12-26T23:15:00+07:00",
            "date_modified": "2024-12-29T10:03:47+07:00"
        },
        {
            "id": "https://lauhnguyen.github.io/Blog/es6-va-nhung-tinh-nang-moi-trong-javascript.html",
            "url": "https://lauhnguyen.github.io/Blog/es6-va-nhung-tinh-nang-moi-trong-javascript.html",
            "title": "ES6 và những tính năng mới trong JavaScript",
            "summary": "1. Giới thiệu về ES6 ECMAScript 6 (ES6), còn được gọi là ECMAScript 2015, là một bản cập nhật lớn&hellip;",
            "content_html": "<article class=\"post-content\">\n<h2> </h2>\n<h3>1. Giới thiệu về ES6</h3>\n<p>ECMAScript 6 (ES6), còn được gọi là ECMAScript 2015, là một bản cập nhật lớn cho JavaScript, giới thiệu nhiều tính năng mới giúp viết code dễ dàng và hiệu quả hơn.</p>\n<h3>2. Let và Const</h3>\n<p>ES6 giới thiệu hai từ khóa mới để khai báo biến: let và const.</p>\n<pre><code>\n// let cho phép khai báo biến có phạm vi block\nlet x = 10;\nif (true) {\n    let x = 20; // x này khác với x ở ngoài\n    console.log(x); // 20\n}\nconsole.log(x); // 10\n\n// const dùng để khai báo hằng số\nconst PI = 3.14159;\n// PI = 3; // Sẽ gây ra lỗi\n            </code></pre>\n<h3>3. Arrow Functions</h3>\n<p>Arrow functions cung cấp cú pháp ngắn gọn để viết function expressions:</p>\n<pre><code>\n// ES5\nvar sum = function(a, b) {\n    return a + b;\n};\n\n// ES6\nconst sum = (a, b) =&gt; a + b;\n\n// Arrow function với nhiều dòng\nconst greet = name =&gt; {\n    let greeting = `Hello, ${name}!`;\n    return greeting;\n};\n            </code></pre>\n<h3>4. Template Literals</h3>\n<p>Template literals cho phép nhúng biểu thức vào trong chuỗi:</p>\n<pre><code>\nconst name = \"Alice\";\nconst greeting = `Hello, ${name}!`;\nconsole.log(greeting); // \"Hello, Alice!\"\n\nconst multiLine = `\n    This is a\n    multi-line\n    string.\n`;\n            </code></pre>\n<h3>5. Destructuring</h3>\n<p>Destructuring cho phép trích xuất dữ liệu từ arrays hoặc objects vào các biến riêng biệt:</p>\n<pre><code>\n// Array destructuring\nconst [a, b] = [1, 2];\nconsole.log(a); // 1\nconsole.log(b); // 2\n\n// Object destructuring\nconst {firstName, lastName} = {firstName: \"John\", lastName: \"Doe\"};\nconsole.log(firstName); // \"John\"\nconsole.log(lastName);  // \"Doe\"\n            </code></pre>\n<h3>6. Default Parameters</h3>\n<p>ES6 cho phép set giá trị mặc định cho tham số của hàm:</p>\n<pre><code>\nfunction greet(name = \"Guest\") {\n    console.log(`Hello, ${name}!`);\n}\n\ngreet(); // \"Hello, Guest!\"\ngreet(\"Alice\"); // \"Hello, Alice!\"\n            </code></pre>\n<h3>7. Rest và Spread Operators</h3>\n<p>Rest operator (...) cho phép biểu diễn một số lượng đối số không xác định dưới dạng một mảng:</p>\n<pre><code>\nfunction sum(...numbers) {\n    return numbers.reduce((total, num) =&gt; total + num, 0);\n}\n\nconsole.log(sum(1, 2, 3, 4)); // 10\n            </code></pre>\n<p>Spread operator (...) cho phép \"trải\" một mảng thành các phần tử riêng lẻ:</p>\n<pre><code>\nconst arr1 = [1, 2, 3];\nconst arr2 = [...arr1, 4, 5];\nconsole.log(arr2); // [1, 2, 3, 4, 5]\n            </code></pre>\n<h3>8. Classes</h3>\n<p>ES6 giới thiệu cú pháp class, giúp việc tạo và sử dụng đối tượng dễ dàng hơn:</p>\n<pre><code>\nclass Animal {\n    constructor(name) {\n        this.name = name;\n    }\n\n    speak() {\n        console.log(`${this.name} makes a sound.`);\n    }\n}\n\nclass Dog extends Animal {\n    speak() {\n        console.log(`${this.name} barks.`);\n    }\n}\n\nconst dog = new Dog('Rex');\ndog.speak(); // \"Rex barks.\"\n            </code></pre>\n<h3>9. Promises</h3>\n<p>Promises cung cấp một cách tốt hơn để xử lý các hoạt động bất đồng bộ:</p>\n<pre><code>\nconst myPromise = new Promise((resolve, reject) =&gt; {\n    setTimeout(() =&gt; {\n        resolve(\"Success!\");\n    }, 1000);\n});\n\nmyPromise.then(result =&gt; {\n    console.log(result); // \"Success!\"\n}).catch(error =&gt; {\n    console.log(error);\n});\n            </code></pre>\n<h3>Kết luận</h3>\n<p>ES6 đã mang lại nhiều cải tiến đáng kể cho JavaScript, giúp code trở nên sạch sẽ, dễ đọc và dễ bảo trì hơn. Việc nắm vững các tính năng này sẽ giúp bạn trở thành một lập trình viên JavaScript hiệu quả hơn.</p>\n</article>",
            "image": "https://lauhnguyen.github.io/Blog/media/posts/7/feature.jpg",
            "author": {
                "name": "hoangnguyen"
            },
            "tags": [
                   "Bài Viết"
            ],
            "date_published": "2024-12-26T23:14:58+07:00",
            "date_modified": "2024-12-29T10:03:57+07:00"
        },
        {
            "id": "https://lauhnguyen.github.io/Blog/xu-ly-ngoai-le-trong-java-best-practices.html",
            "url": "https://lauhnguyen.github.io/Blog/xu-ly-ngoai-le-trong-java-best-practices.html",
            "title": "Xử lý ngoại lệ trong Java: Best Practices",
            "summary": "1. Giới thiệu về xử lý ngoại lệ Xử lý ngoại lệ là một phần quan trọng trong lập trình&hellip;",
            "content_html": "<main>\n<article class=\"post-content\">\n<h2> </h2>\n<h3>1. Giới thiệu về xử lý ngoại lệ</h3>\n<p>Xử lý ngoại lệ là một phần quan trọng trong lập trình Java, giúp quản lý các lỗi và tình huống bất thường một cách hiệu quả.</p>\n<h3>2. Sử dụng try-catch-finally</h3>\n<p>Cấu trúc try-catch-finally là nền tảng của xử lý ngoại lệ trong Java:</p>\n<pre><code>\ntry {\n    // Code có thể gây ra ngoại lệ\n    int result = 10 / 0;\n} catch (ArithmeticException e) {\n    // Xử lý ngoại lệ\n    System.out.println(\"Lỗi: \" + e.getMessage());\n} finally {\n    // Code luôn được thực thi, bất kể có ngoại lệ hay không\n    System.out.println(\"Đã hoàn thành xử lý\");\n}\n            </code></pre>\n<h3>3. Sử dụng nhiều khối catch</h3>\n<p>Khi có nhiều loại ngoại lệ có thể xảy ra, sử dụng nhiều khối catch:</p>\n<pre><code>\ntry {\n    // Code có thể gây ra nhiều loại ngoại lệ\n    int[] arr = new int[5];\n    arr[10] = 50;\n} catch (ArrayIndexOutOfBoundsException e) {\n    System.out.println(\"Lỗi truy cập mảng: \" + e.getMessage());\n} catch (Exception e) {\n    System.out.println(\"Lỗi chung: \" + e.getMessage());\n}\n            </code></pre>\n<h3>4. Tạo và ném ngoại lệ tùy chỉnh</h3>\n<p>Tạo ngoại lệ tùy chỉnh khi cần xử lý các tình huống đặc biệt:</p>\n<pre><code>\npublic class CustomException extends Exception {\n    public CustomException(String message) {\n        super(message);\n    }\n}\n\n// Sử dụng\nif (someCondition) {\n    throw new CustomException(\"Đã xảy ra lỗi tùy chỉnh\");\n}\n            </code></pre>\n<h3>5. Sử dụng try-with-resources</h3>\n<p>Đối với các tài nguyên cần đóng (như file, database connections), sử dụng try-with-resources:</p>\n<pre><code>\ntry (FileInputStream fis = new FileInputStream(\"file.txt\")) {\n    // Xử lý file\n} catch (IOException e) {\n    System.out.println(\"Lỗi đọc file: \" + e.getMessage());\n}\n            </code></pre>\n<h3>6. Ghi log thay vì in ra console</h3>\n<p>Trong môi trường sản phẩm, nên sử dụng logging framework thay vì in ra console:</p>\n<pre><code>\nimport java.util.logging.Logger;\n\nprivate static final Logger logger = Logger.getLogger(MyClass.class.getName());\n\ntry {\n    // Code có thể gây ra ngoại lệ\n} catch (Exception e) {\n    logger.severe(\"Đã xảy ra lỗi: \" + e.getMessage());\n}\n            </code></pre>\n<h3>7. Không bỏ qua ngoại lệ</h3>\n<p>Tránh bỏ qua ngoại lệ bằng cách để trống khối catch:</p>\n<pre><code>\ntry {\n    // Code có thể gây ra ngoại lệ\n} catch (Exception e) {\n    // KHÔNG LÀM NHƯ NÀY\n}\n\n// Thay vào đó, ít nhất hãy ghi log\ntry {\n    // Code có thể gây ra ngoại lệ\n} catch (Exception e) {\n    logger.error(\"Đã xảy ra lỗi\", e);\n}\n            </code></pre>\n<h3>8. Xử lý ngoại lệ ở mức độ phù hợp</h3>\n<p>Xử lý ngoại lệ ở mức độ có đủ thông tin để xử lý một cách có ý nghĩa:</p>\n<pre><code>\npublic void processFile(String fileName) throws IOException {\n    try {\n        // Xử lý file\n    } catch (FileNotFoundException e) {\n        System.out.println(\"File không tồn tại: \" + fileName);\n        throw e; // Ném lại ngoại lệ để lớp gọi có thể xử lý tiếp\n    }\n}\n            </code></pre>\n<h3>Kết luận</h3>\n<p>Xử lý ngoại lệ hiệu quả là một kỹ năng quan trọng trong lập trình Java. Bằng cách tuân thủ các best practices này, bạn có thể tạo ra code mạnh mẽ hơn, dễ bảo trì hơn và ít lỗi hơn.</p>\n</article>\n</main>",
            "image": "https://lauhnguyen.github.io/Blog/media/posts/6/feature.jpg",
            "author": {
                "name": "hoangnguyen"
            },
            "tags": [
                   "Bài Viết"
            ],
            "date_published": "2024-12-26T23:14:58+07:00",
            "date_modified": "2024-12-29T10:04:07+07:00"
        },
        {
            "id": "https://lauhnguyen.github.io/Blog/nodejs-xay-dung-ung-dung-server-side-voi-javascript.html",
            "url": "https://lauhnguyen.github.io/Blog/nodejs-xay-dung-ung-dung-server-side-voi-javascript.html",
            "title": "Node.js: Xây dựng ứng dụng server-side với JavaScript",
            "summary": "1. Giới thiệu về Node.js Node.js là một môi trường runtime JavaScript được xây dựng trên Chrome's V8 JavaScript engine.",
            "content_html": "<main>\n<article class=\"post-content\">\n<h2> </h2>\n<h3>1. Giới thiệu về Node.js</h3>\n<p>Node.js là một môi trường runtime JavaScript được xây dựng trên Chrome's V8 JavaScript engine. Nó cho phép bạn chạy JavaScript ở phía server, mở ra khả năng xây dựng ứng dụng web full-stack chỉ với JavaScript.</p>\n<h3>2. Cài đặt Node.js</h3>\n<p>Truy cập <a href=\"https://nodejs.org\">nodejs.org</a> và tải phiên bản phù hợp với hệ điều hành của bạn. Sau khi cài đặt, kiểm tra bằng lệnh:</p>\n<pre><code>\nnode --version\nnpm --version\n            </code></pre>\n<h3>3. Tạo một ứng dụng Node.js đơn giản</h3>\n<p>Tạo file app.js với nội dung sau:</p>\n<pre><code>\nconst http = require('http');\n\nconst hostname = '127.0.0.1';\nconst port = 3000;\n\nconst server = http.createServer((req, res) =&gt; {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World\\n');\n});\n\nserver.listen(port, hostname, () =&gt; {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\n            </code></pre>\n<p>Chạy ứng dụng bằng lệnh: <code>node app.js</code></p>\n<h3>4. NPM (Node Package Manager)</h3>\n<p>NPM là công cụ quản lý package cho Node.js. Để khởi tạo một dự án mới:</p>\n<pre><code>\nnpm init -y\n            </code></pre>\n<p>Để cài đặt package:</p>\n<pre><code>\nnpm install express\n            </code></pre>\n<h3>5. Express.js Framework</h3>\n<p>Express là một web application framework phổ biến cho Node.js:</p>\n<pre><code>\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) =&gt; {\n  res.send('Hello World!');\n});\n\napp.listen(port, () =&gt; {\n  console.log(`Example app listening at http://localhost:${port}`);\n});\n            </code></pre>\n<h3>6. Routing trong Express</h3>\n<p>Express cho phép định nghĩa các route một cách dễ dàng:</p>\n<pre><code>\napp.get('/about', (req, res) =&gt; {\n  res.send('About page');\n});\n\napp.post('/api/users', (req, res) =&gt; {\n  // Xử lý tạo user mới\n  res.json({ message: 'User created' });\n});\n            </code></pre>\n<h3>7. Middleware</h3>\n<p>Middleware là các hàm có quyền truy cập vào object request, object response, và hàm next trong chu trình request-response của ứng dụng:</p>\n<pre><code>\napp.use((req, res, next) =&gt; {\n  console.log('Time:', Date.now());\n  next();\n});\n            </code></pre>\n<h3>8. Kết nối với Database</h3>\n<p>Node.js có thể kết nối với nhiều loại database. Ví dụ với MongoDB sử dụng Mongoose:</p>\n<pre><code>\nconst mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost/myapp', {useNewUrlParser: true, useUnifiedTopology: true});\n\nconst Cat = mongoose.model('Cat', { name: String });\n\nconst kitty = new Cat({ name: 'Zildjian' });\nkitty.save().then(() =&gt; console.log('meow'));\n            </code></pre>\n<h3>9. Asynchronous Programming</h3>\n<p>Node.js sử dụng mô hình non-blocking I/O, cho phép xử lý bất đồng bộ hiệu quả:</p>\n<pre><code>\nconst fs = require('fs');\n\nfs.readFile('file.txt', 'utf8', (err, data) =&gt; {\n  if (err) throw err;\n  console.log(data);\n});\n\n// Hoặc sử dụng Promises\nconst fsPromises = require('fs').promises;\n\nasync function readFile() {\n  try {\n    const data = await fsPromises.readFile('file.txt', 'utf8');\n    console.log(data);\n  } catch (err) {\n    console.error('Error reading file:', err);\n  }\n}\n\nreadFile();\n            </code></pre>\n<h3>10. Deployment</h3>\n<p>Node.js applications có thể được triển khai trên nhiều nền tảng như Heroku, DigitalOcean, AWS, etc. Ví dụ với Heroku:</p>\n<pre><code>\n// Trong package.json\n\"scripts\": {\n  \"start\": \"node app.js\"\n}\n\n// Procfile\nweb: npm start\n            </code></pre>\n<h3>Kết luận</h3>\n<p>Node.js mở ra một thế giới mới cho việc phát triển ứng dụng server-side bằng JavaScript. Với hiệu suất cao, hệ sinh thái package phong phú, và khả năng xử lý bất đồng bộ mạnh mẽ, Node.js là một lựa chọn tuyệt vời cho việc xây dựng các ứng dụng web hiện đại và có khả năng mở rộng.</p>\n</article>\n</main>",
            "image": "https://lauhnguyen.github.io/Blog/media/posts/5/feature.jpg",
            "author": {
                "name": "hoangnguyen"
            },
            "tags": [
                   "Bài Viết"
            ],
            "date_published": "2024-12-26T23:14:53+07:00",
            "date_modified": "2024-12-29T10:04:20+07:00"
        },
        {
            "id": "https://lauhnguyen.github.io/Blog/gioi-thieu-ve-java-ngon-ngu-lap-trinh-huong-doi-tuong.html",
            "url": "https://lauhnguyen.github.io/Blog/gioi-thieu-ve-java-ngon-ngu-lap-trinh-huong-doi-tuong.html",
            "title": "Giới thiệu về Java: Ngôn ngữ lập trình hướng đối tượng",
            "summary": "Ngôn ngữ lập trình phổ biến nhất trên thế giới, được sử dụng rộng rãi trong phát triển phần mềm&hellip;",
            "content_html": "<header></header><main>\n<article class=\"post-content\">\n<p>Ngôn ngữ lập trình phổ biến nhất trên thế giới, được sử dụng rộng rãi trong phát triển phần mềm doanh nghiệp, ứng dụng Android, và nhiều lĩnh vực khác. Trong bài viết này, chúng ta sẽ tìm hiểu về các đặc điểm cơ bản của Java và lý do tại sao nó lại được ưa chuộng đến vậy.</p>\n<h3>1. Lịch sử của Java</h3>\n<p>Java được phát triển bởi James Gosling và các đồng nghiệp tại Sun Microsystems vào đầu những năm 1990. Ban đầu, nó được thiết kế cho các thiết bị điện tử gia dụng, nhưng sau đó đã phát triển thành một ngôn ngữ lập trình đa năng.</p>\n<h3>2. Đặc điểm chính của Java</h3>\n<ul>\n<li><strong>Hướng đối tượng:</strong> Java là một ngôn ngữ lập trình hướng đối tượng, cho phép tổ chức code thành các đối tượng có thuộc tính và phương thức.</li>\n<li><strong>Độc lập nền tảng:</strong> Với slogan \"Write Once, Run Anywhere\", Java cho phép chạy trên nhiều nền tảng khác nhau mà không cần biên dịch lại.</li>\n<li><strong>Bảo mật:</strong> Java được thiết kế với nhiều tính năng bảo mật tích hợp, giúp phát triển các ứng dụng an toàn.</li>\n<li><strong>Mạnh mẽ:</strong> Java có cơ chế quản lý bộ nhớ tự động và xử lý ngoại lệ mạnh mẽ.</li>\n</ul>\n<h3>3. Ứng dụng của Java</h3>\n<p>Java được sử dụng rộng rãi trong nhiều lĩnh vực:</p>\n<ul>\n<li>Phát triển ứng dụng doanh nghiệp</li>\n<li>Phát triển ứng dụng Android</li>\n<li>Phát triển ứng dụng web (với Java EE)</li>\n<li>Phát triển phần mềm nhúng</li>\n<li>Big Data và phân tích dữ liệu</li>\n</ul>\n<h3>Kết luận</h3>\n<p>Java là một ngôn ngữ lập trình mạnh mẽ và linh hoạt, phù hợp cho nhiều loại dự án khác nhau. Với cộng đồng lớn và hệ sinh thái phong phú, Java tiếp tục là một kỹ năng quan trọng cho các lập trình viên trong thời đại số hóa hiện nay.</p>\n</article>\n</main>",
            "image": "https://lauhnguyen.github.io/Blog/media/posts/4/feature.jpg",
            "author": {
                "name": "hoangnguyen"
            },
            "tags": [
                   "Bài Viết"
            ],
            "date_published": "2024-12-26T23:12:41+07:00",
            "date_modified": "2024-12-29T10:04:33+07:00"
        }
    ]
}
